name: Build test and publish upstream tests

on:
  push:
    branches:
      - rkim/21067-upstream-tests
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'

env:
  WH_6U_IMAGE_NAME: ghcr.io/tenstorrent/tt-metal/upstream-tests-wh-6u
  WH_6U_PROFILER_IMAGE_NAME: ghcr.io/tenstorrent/tt-metal/upstream-profiler-tests-wh-6u

jobs:
  build-artifact:
    uses: ./.github/workflows/build-artifact.yaml
    secrets: inherit
    with:
      version: 22.04
      build-wheel: true
  build-artifact-profiler:
    uses: ./.github/workflows/build-artifact.yaml
    secrets: inherit
    with:
      version: 22.04
      build-wheel: true
      tracy: true
  get-image-tags:
    runs-on: ubuntu-latest
    outputs:
      wh-6u-image-tag: ${{ steps.set-wh-6u-image-tag.outputs.wh-6u-image-tag }}
    steps:
      - name: Set image tags
        id: set-wh-6u-image-tag
        run: |
          echo "wh-6u-image-tag=${{ env.WH_6U_IMAGE_NAME }}:${{ github.run_number }}" >> "$GITHUB_OUTPUT"
          echo "wh-6u-profiler-image-tag=${{ env.WH_6U_PROFILER_IMAGE_NAME }}:${{ github.run_number }}" >> "$GITHUB_OUTPUT"
  build-wh-6u-image:
    needs:
      # - build-artifact
      # - build-artifact-profiler
      - get-image-tags
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        # We're going to add a profiler image in here for tests that need profiler.
        # Ultimate goal will be to have a master script that people can call via
        # <url_to_script_on_main.sh> | sh -c or something like that which will download
        # the images and run them.
        image-config:
          - image-tag: ${{ needs.get-image-tags.outputs.wh-6u-image-tag }}
            dockerfile: dockerfile/upstream_test_images/Dockerfile.wh-6u
            # Need to update these
            build-artifact-name: TTMetal_build_any
            wheel-artifact-name: eager-dist-ubuntu-22.04-any
            test-command: tests/scripts/wh_6u/run_wh_6u_upstream_tests.sh
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts from metal
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          # 22.04 artifact... we'll probably need to key on that in the original action in metal
          # TODO - change to outputs from build above
          name: ${{ matrix.image-config.build-artifact-name }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: 14628746342
      - run: mkdir -p _tt-metal
      - run: tar -xvf ttm_any.tar -C _tt-metal/
      - run: ls -hal _tt-metal
      - name: ðŸ§ª Download Python Wheel
        uses: actions/download-artifact@v4
        with:
          # TODO - change to outputs from build above
          name: ${{ matrix.image-config.wheel-artifact-name }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: 14628746342
      - name: ðŸ’¿ Verify Wheel exists
        shell: bash
        run: |
          echo "ðŸ“‚ In directory: $(pwd)"
          echo "ðŸ“„ Files:"
          ls -la .
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.image-config.dockerfile }}
          platforms: linux/amd64
          pull: true
          push: true
          # https://github.com/docker/build-push-action/issues/557#issuecomment-1030412477
          # TODO - should probably parameterize the dev docker image name as well
          build-args: |
            TT_METAL_DEV_VERSION=latest
            TT_METAL_COMMIT_SHA=${{ github.sha }}
            TEST_COMMAND=${{ matrix.image-config.test-command }}
          # Use run_number as it should be unique for every run, can trace to a commit, and is a
          # static counter managed by GitHub
          tags: ${{ matrix.image-config.image-tag }}
          context: ${{ github.workspace }}
      - name: Tag and push latest
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          # TODO - To clean up, not sure if we should split out image name and tag
          IMAGE_NAME="${{ env.WH_6U_IMAGE_NAME }}"
          LATEST_TAG="${IMAGE_NAME}:latest"
          echo "Tagging ${{ matrix.image-config.image-tag }} as ${LATEST_TAG}"
          docker tag ${{ matrix.image-config.image-tag }} ${LATEST_TAG}
          docker push ${LATEST_TAG}
  test-wh-6u-image:
    needs:
      - get-image-tags
      - build-wh-6u-image
    runs-on:
      - arch-wormhole_b0
      - topology-6u
      - in-service
      - pipeline-functional
    steps:
      # likely need to put this into a script which can be parameterized on the build number
      # and whether to only pull
      - name: Pull image
        timeout-minutes: 10
        run: docker pull ${{ needs.get-image-tags.outputs.wh-6u-image-tag }}
        # likely will be one script later - but for now we can call directly
      - name: Run image
        timeout-minutes: 10
        run: docker run -v /dev/hugepages-1G:/dev/hugepages-1G --device /dev/tenstorrent ${{ needs.get-image-tags.outputs.wh-6u-image-tag }}
